services:
  # Redis для BullMQ очередей
  redis:
    image: redis:7-alpine
    container_name: echoon-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --timeout 300 --tcp-keepalive 60
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - echoon-network

  # EchoOn Backend приложение (разработка)
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: echoon-backend-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Server Configuration
      - PORT=3000
      - NODE_ENV=development

      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379

      # Firebase Configuration
      - FIREBASE_CREDENTIALS=${FIREBASE_CREDENTIALS}

      # Supabase Configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      # Монтируем исходный код для автоматического обновления
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./logs:/app/logs
      # Исключаем node_modules из монтирования
      - /app/node_modules
    command: npm run dev
    networks:
      - echoon-network

# Volumes для персистентного хранения данных Redis
volumes:
  redis_data:
    driver: local

# Изолированная сеть для сервисов
networks:
  echoon-network:
    driver: bridge
