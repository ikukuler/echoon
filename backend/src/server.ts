import "dotenv/config";
import express, { Request, Response, NextFunction } from "express";
import cors from "cors";
import multer from "multer";
import { createBullBoard } from "@bull-board/api";
import { BullMQAdapter } from "@bull-board/api/bullMQAdapter";
import { ExpressAdapter } from "@bull-board/express";
import {
  supabase,
  testConnection as testSupabaseConnection,
  uploadFileToStorage,
} from "./supabaseClient";
import { scheduleEchoNotification, queuePromise } from "./echoQueue";
import {
  authenticateUser,
  verifyTokenOnly,
  AuthenticatedRequest,
} from "./authMiddleware";
import { authService } from "./authService";
import {
  globalLimiter,
  createEchoLimiter,
  tokenRegistrationLimiter,
  readLimiter,
  profileUpdateLimiter,
  healthCheckLimiter,
} from "./rateLimitMiddleware";
import {
  CreateEchoRequest,
  CreateEchoResponse,
  UserProfileResponse,
  UpdateProfileRequest,
  RegisterTokenRequest,
  RegisterTokenResponse,
  GetEchoesQuery,
  GetEchoesResponse,
  HealthCheckResponse,
  ApiError,
  EchoPartType,
  User,
  Echo,
  EchoPart,
  EchoJobData,
} from "./types";

const app = express();
const PORT = process.env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç–∏
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞—É–¥–∏–æ
    if (
      file.mimetype.startsWith("image/") ||
      file.mimetype.startsWith("audio/")
    ) {
      cb(null, true);
    } else {
      cb(new Error("Only images and audio files are allowed"));
    }
  },
});

// Bull Board setup - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const serverAdapter = new ExpressAdapter();
serverAdapter.setBasePath("/admin/queues");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Bull Board –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
let bullBoardInitialized = false;
queuePromise
  .then((echoQueue: any) => {
    createBullBoard({
      queues: [new BullMQAdapter(echoQueue)],
      serverAdapter: serverAdapter,
    });
    bullBoardInitialized = true;
    console.log("üìä Bull Board initialized successfully");
  })
  .catch((error: Error) => {
    console.error("‚ùå Failed to initialize Bull Board:", error.message);
  });

// Middleware
app.use(cors());
app.use(express.json());

// Trust proxy for accurate IP addresses (–≤–∞–∂–Ω–æ –¥–ª—è rate limiting)
app.set("trust proxy", 1);

// Bull Board UI (before global rate limiter to avoid limiting admin access)
app.use("/admin/queues", (req, res, next) => {
  if (!bullBoardInitialized) {
    return res.status(503).json({
      error: "Bull Board is initializing",
      message: "Please wait for Redis and queue initialization",
    });
  }
  return serverAdapter.getRouter()(req, res, next);
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(globalLimiter);

// ===== AUTH ENDPOINTS =====

// POST /api/auth/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post(
  "/api/auth/register",
  async (req: Request, res: Response): Promise<void> => {
    try {
      const { email, password, name } = req.body;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!email || !password) {
        res.status(400).json({
          error: "Email and password are required",
          code: "MISSING_CREDENTIALS",
        });
        return;
      }

      if (password.length < 6) {
        res.status(400).json({
          error: "Password must be at least 6 characters long",
          code: "WEAK_PASSWORD",
        });
        return;
      }

      const result = await authService.register(email, password, name);

      if (result.success) {
        res.status(201).json({
          message: "User registered successfully",
          user: result.user,
          token: result.token,
        });
      } else {
        res.status(400).json({
          error: result.error,
          code: "REGISTRATION_FAILED",
        });
      }
    } catch (error) {
      console.error("Registration error:", error);
      res.status(500).json({
        error: "Internal server error",
        code: "INTERNAL_ERROR",
      });
    }
  },
);

// POST /api/auth/login - –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post(
  "/api/auth/login",
  async (req: Request, res: Response): Promise<void> => {
    try {
      const { email, password } = req.body;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!email || !password) {
        res.status(400).json({
          error: "Email and password are required",
          code: "MISSING_CREDENTIALS",
        });
        return;
      }

      const result = await authService.login(email, password);

      if (result.success) {
        res.json({
          message: "Login successful",
          user: result.user,
          token: result.token,
        });
      } else {
        res.status(401).json({
          error: result.error,
          code: "LOGIN_FAILED",
        });
      }
    } catch (error) {
      console.error("Login error:", error);
      res.status(500).json({
        error: "Internal server error",
        code: "INTERNAL_ERROR",
      });
    }
  },
);

// GET /api/auth/me - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get(
  "/api/auth/me",
  authenticateUser,
  async (req: Request, res: Response): Promise<void> => {
    try {
      const authReq = req as AuthenticatedRequest;
      const user = await authService.getUserById(authReq.user!.userId);

      if (!user) {
        res.status(404).json({
          error: "User not found",
          code: "USER_NOT_FOUND",
        });
        return;
      }

      res.json({
        user,
      });
    } catch (error) {
      console.error("Get current user error:", error);
      res.status(500).json({
        error: "Internal server error",
        code: "INTERNAL_ERROR",
      });
    }
  },
);

// POST /api/auth/register-token - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è FCM —Ç–æ–∫–µ–Ω–∞
app.post(
  "/api/auth/register-token",
  authenticateUser,
  async (req: Request, res: Response): Promise<void> => {
    try {
      const authReq = req as AuthenticatedRequest;
      const { fcmToken, deviceId, deviceType } = req.body;

      if (!fcmToken) {
        res.status(400).json({
          error: "FCM token is required",
          code: "MISSING_FCM_TOKEN",
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const { data: existingToken } = await supabase
        .from("user_tokens")
        .select("id, is_active")
        .eq("user_id", authReq.user!.userId)
        .eq("fcm_token", fcmToken)
        .single();

      console.log("existingToken", existingToken);

      if (existingToken) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
        const { error: updateError } = await supabase
          .from("user_tokens")
          .update({
            is_active: true,
            updated_at: new Date().toISOString(),
            device_id: deviceId || null,
            device_type: deviceType || "unknown",
          })
          .eq("id", existingToken.id);

        if (updateError) {
          console.error("Error updating FCM token:", updateError);
          res.status(500).json({
            error: "Failed to update FCM token",
            code: "TOKEN_UPDATE_FAILED",
          });
          return;
        }

        res.json({
          message: "FCM token updated successfully",
          token: {
            id: existingToken.id,
            deviceId: deviceId || null,
            deviceType: deviceType || "unknown",
            isActive: true,
          },
        });
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        const { data: newToken, error: insertError } = await supabase
          .from("user_tokens")
          .insert({
            user_id: authReq.user!.userId,
            fcm_token: fcmToken,
            device_id: deviceId || null,
            device_type: deviceType || "unknown",
            is_active: true,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          })
          .select()
          .single();

        if (insertError) {
          console.error("Error inserting FCM token:", insertError);
          res.status(500).json({
            error: "Failed to register FCM token",
            code: "TOKEN_INSERT_FAILED",
          });
          return;
        }

        res.status(201).json({
          message: "FCM token registered successfully",
          token: {
            id: newToken.id,
            deviceId: deviceId || null,
            deviceType: deviceType || "unknown",
            isActive: true,
          },
        });
      }
    } catch (error) {
      console.error("Register token error:", error);
      res.status(500).json({
        error: "Internal server error",
        code: "INTERNAL_ERROR",
      });
    }
  },
);

// Helper function to schedule delayed job using BullMQ
async function scheduleDelayedJob(
  echoId: string,
  userId: string,
  returnAt: string,
): Promise<void> {
  try {
    await scheduleEchoNotification(echoId, userId, returnAt);
    console.log(
      `Successfully scheduled echo ${echoId} using BullMQ for ${returnAt}`,
    );
  } catch (error: unknown) {
    console.error(`Failed to schedule echo ${echoId} with BullMQ:`, error);
    // Fallback: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–ø—Ä–æ—Å–∞
function generateRequestId(): string {
  return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ (–Ω–µ –±–æ–ª–µ–µ –≥–æ–¥–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞)
function generateRandomReturnDate(): string {
  const now = new Date();
  const oneYearFromNow = new Date(now.getTime() + 365 * 24 * 60 * 60 * 1000);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É –º–µ–∂–¥—É —Å–µ–π—á–∞—Å –∏ –≥–æ–¥–æ–º –≤–ø–µ—Ä–µ–¥
  const randomTime =
    now.getTime() + Math.random() * (oneYearFromNow.getTime() - now.getTime());
  const randomDate = new Date(randomTime);

  // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –º–∏–Ω—É—Ç (—É–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã –∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
  randomDate.setSeconds(0, 0);

  return randomDate.toISOString();
}

// POST /api/echoes endpoint (protected + rate limited)
app.post(
  "/api/echoes",
  createEchoLimiter,
  authenticateUser,
  async (req: Request, res: Response): Promise<void> => {
    const requestId = generateRequestId();

    try {
      const authReq = req as AuthenticatedRequest;
      console.log(
        `[${requestId}] POST /api/echoes - Starting request processing for user ${authReq.user?.email}`,
      );

      const { return_at: returnAt, parts }: CreateEchoRequest = req.body;
      const userId = authReq.user!.userId; // –ë–µ—Ä–µ–º userId –∏–∑ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—Ç–∞: –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é
      const finalReturnAt = returnAt || generateRandomReturnDate();

      console.log(
        `[${requestId}] Return date: ${
          returnAt ? "user-provided" : "auto-generated"
        } - ${finalReturnAt}`,
      );

      if (!Array.isArray(parts) || parts.length === 0) {
        console.log(
          `[${requestId}] Validation error: parts must be non-empty array`,
        );
        res.status(400).json({
          error: 'Field "parts" must be a non-empty array',
          code: "INVALID_PARTS",
        } satisfies ApiError);
        return;
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã parts - –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å type –∏ content
      for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        if (!part || typeof part !== "object") {
          console.log(
            `[${requestId}] Validation error: part[${i}] must be an object`,
          );
          res.status(400).json({
            error: `Part at index ${i} must be an object`,
            code: "INVALID_PART_STRUCTURE",
          } satisfies ApiError);
          return;
        }

        if (!part.type || typeof part.type !== "string") {
          console.log(
            `[${requestId}] Validation error: part[${i}].type is required`,
          );
          res.status(400).json({
            error: `Part at index ${i} must have a "type" field`,
            code: "MISSING_PART_TYPE",
          } satisfies ApiError);
          return;
        }

        if (!part.content || typeof part.content !== "string") {
          console.log(
            `[${requestId}] Validation error: part[${i}].content is required`,
          );
          res.status(400).json({
            error: `Part at index ${i} must have a "content" field`,
            code: "MISSING_PART_CONTENT",
          } satisfies ApiError);
          return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–∏–ø–æ–≤
        const allowedTypes: EchoPartType[] = ["text", "image", "audio", "link"];
        if (!allowedTypes.includes(part.type as EchoPartType)) {
          console.log(
            `[${requestId}] Validation error: part[${i}].type invalid - ${part.type}`,
          );
          res.status(400).json({
            error: `Part at index ${i} has invalid type "${
              part.type
            }". Allowed types: ${allowedTypes.join(", ")}`,
            code: "INVALID_PART_TYPE",
          } satisfies ApiError);
          return;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ finalReturnAt - –≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
      const returnDate = new Date(finalReturnAt);
      if (isNaN(returnDate.getTime())) {
        console.log(
          `[${requestId}] Validation error: returnAt invalid date format`,
        );
        res.status(400).json({
          error: "returnAt must be a valid ISO date string",
          code: "INVALID_DATE_FORMAT",
        } satisfies ApiError);
        return;
      }

      if (returnDate <= new Date()) {
        console.log(`[${requestId}] Validation error: returnAt is in the past`);
        res.status(400).json({
          error: "returnAt must be a future date",
          code: "PAST_DATE",
        } satisfies ApiError);
        return;
      }

      console.log(
        `[${requestId}] Validation passed - creating echo for user ${userId} with ${parts.length} parts`,
      );

      // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (—ç–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
      let createdEchoId: string | null = null;

      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º echo –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const { data: echo, error: echoError } = await supabase
          .from("echoes")
          .insert({
            user_id: userId,
            return_at: finalReturnAt,
            created_at: new Date().toISOString(),
          })
          .select()
          .single();

        if (echoError) {
          console.error(`[${requestId}] Database error creating echo:`, {
            error: echoError,
            userId,
            finalReturnAt,
          });
          res.status(500).json({
            error: "Failed to create echo",
            code: "DB_ECHO_INSERT_FAILED",
          } satisfies ApiError);
          return;
        }

        const createdEcho = echo as Echo;
        createdEchoId = createdEcho.id;
        console.log(
          `[${requestId}] Echo created successfully with ID: ${createdEchoId}`,
        );

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è echo_parts
        const echoParts = parts.map((part, index) => ({
          echo_id: createdEcho.id,
          type: part.type,
          content: part.content,
          order_index: index,
          created_at: new Date().toISOString(),
        }));

        console.log(`[${requestId}] Inserting ${echoParts.length} echo parts`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–∏ echo
        const { data: insertedParts, error: partsError } = await supabase
          .from("echo_parts")
          .insert(echoParts)
          .select();

        if (partsError) {
          console.error(`[${requestId}] Database error creating echo parts:`, {
            error: partsError,
            echoId: createdEcho.id,
            partsCount: echoParts.length,
          });

          // –û—Ç–∫–∞—Ç: —É–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π echo
          console.log(
            `[${requestId}] Rolling back - deleting echo ${createdEcho.id}`,
          );
          const { error: deleteError } = await supabase
            .from("echoes")
            .delete()
            .eq("id", createdEcho.id);

          if (deleteError) {
            console.error(
              `[${requestId}] Failed to rollback echo deletion:`,
              deleteError,
            );
          }

          res.status(500).json({
            error: "Failed to create echo parts",
            code: "DB_PARTS_INSERT_FAILED",
          } satisfies ApiError);
          return;
        }

        const typedInsertedParts = insertedParts as EchoPart[];
        console.log(
          `[${requestId}] Successfully inserted ${typedInsertedParts.length} echo parts`,
        );

        // –°—Ç–∞–≤–∏–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å BullMQ
        console.log(
          `[${requestId}] Scheduling delayed job for ${finalReturnAt}`,
        );
        await scheduleDelayedJob(createdEcho.id, userId, finalReturnAt);

        console.log(`[${requestId}] Echo creation completed successfully`);

        const response: CreateEchoResponse = {
          message: "Echo created successfully",
          echo: {
            id: createdEcho.id,
            user_id: userId,
            return_at: createdEcho.return_at,
            parts_count: parts.length,
            parts: typedInsertedParts.map((part) => ({
              id: part.id,
              type: part.type,
              content: part.content,
              order_index: part.order_index,
            })),
          },
        };

        res.status(201).json(response);
      } catch (dbError: unknown) {
        console.error(`[${requestId}] Unexpected database error:`, dbError);

        // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–∞—Ç–∞, –µ—Å–ª–∏ echo –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if (createdEchoId) {
          console.log(
            `[${requestId}] Attempting cleanup of echo ${createdEchoId}`,
          );
          try {
            await supabase.from("echoes").delete().eq("id", createdEchoId);
            console.log(`[${requestId}] Cleanup completed`);
          } catch (cleanupError: unknown) {
            console.error(`[${requestId}] Cleanup failed:`, cleanupError);
          }
        }

        throw dbError;
      }
    } catch (error: unknown) {
      console.error(`[${requestId}] Unhandled error in /api/echoes:`, {
        error: error instanceof Error ? error.message : "Unknown error",
        stack: error instanceof Error ? error.stack : undefined,
        body: req.body,
      });

      res.status(500).json({
        error: "Internal server error",
        code: "INTERNAL_ERROR",
        requestId,
      } satisfies ApiError);
    }
  },
);

// GET /api/user/echoes/:echoId - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —ç—Ö–æ –ø–æ ID
// app.get(
//   "/api/user/echoes/:echoId",
//   // readLimiter, // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û
//   authenticateUser,
//   async (req: Request, res: Response): Promise<void> => {
//     try {
//       const authReq = req as AuthenticatedRequest;
//       const userId = authReq.user!.userId;
//       const echoId = req.params.echoId;

//       const { data: echo, error: echoError } = await supabase
//         .from("echoes")
//         .select(
//           `
//           id,
//           user_id,
//           return_at,
//           created_at,
//           echo_parts (
//             id,
//             type,
//             content,
//             order_index
//           )
//         `,
//         )
//         .eq("id", echoId)
//         .eq("user_id", userId)
//         .single();

//       if (echoError) {
//         console.error("Error fetching echo:", echoError);
//         res.status(404).json({ error: "Echo not found" });
//         return;
//       }

//       res.json(echo);
//     } catch (error) {
//       console.error("Error in /api/echoes/:echoId:", error);
//       res.status(500).json({ error: "Internal server error" });
//     }
//   },
// );

// User profile endpoints

// GET /api/user/profile - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get(
  "/api/user/profile",
  readLimiter,
  authenticateUser,
  async (req: Request, res: Response): Promise<void> => {
    try {
      const authReq = req as AuthenticatedRequest;
      const user = await authService.getUserById(authReq.user!.userId);

      if (!user) {
        res
          .status(404)
          .json({ error: "User not found", code: "USER_NOT_FOUND" });
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: echoStats, error: statsError } = await supabase
        .from("echoes")
        .select("id", { count: "exact" })
        .eq("user_id", user.id);

      const { data: tokenStats, error: tokenError } = await supabase
        .from("user_tokens")
        .select("id", { count: "exact" })
        .eq("user_id", user.id)
        .eq("is_active", true);

      const response: UserProfileResponse = {
        user: {
          id: user.id,
          email: user.email,
          displayName: user.name || null,
          photoUrl: null, // Not available in new schema
          emailVerified: true, // Email/password users are verified
          provider: "email",
          isActive: true,
          lastLoginAt: user.updated_at,
          createdAt: user.created_at,
        },
        stats: {
          totalEchoes: echoStats?.length || 0,
          activeTokens: tokenStats?.length || 0,
        },
      };

      res.json(response);
    } catch (error: unknown) {
      console.error("Error fetching user profile:", error);
      res.status(500).json({
        error: "Failed to fetch user profile",
        code: "PROFILE_FETCH_FAILED",
      } satisfies ApiError);
    }
  },
);

// PUT /api/user/profile - –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put(
  "/api/user/profile",
  profileUpdateLimiter,
  authenticateUser,
  async (req: Request, res: Response): Promise<void> => {
    try {
      const authReq = req as AuthenticatedRequest;
      const userId = authReq.user!.userId;
      const { displayName }: UpdateProfileRequest = req.body;

      const updateData: Partial<Pick<User, "display_name">> = {};

      if (displayName !== undefined) {
        updateData.display_name = displayName;
      }

      if (Object.keys(updateData).length === 0) {
        res.status(400).json({
          error: "No valid fields to update",
          code: "NO_UPDATE_FIELDS",
        } satisfies ApiError);
        return;
      }

      const { data: updatedUser, error } = await supabase
        .from("users")
        .update(updateData)
        .eq("id", userId)
        .select()
        .single();

      if (error) {
        console.error("Error updating user profile:", error);
        res.status(500).json({
          error: "Failed to update user profile",
          code: "PROFILE_UPDATE_FAILED",
        } satisfies ApiError);
        return;
      }

      const typedUser = updatedUser as User;
      res.json({
        message: "Profile updated successfully",
        user: {
          id: typedUser.id,
          email: typedUser.email,
          displayName: typedUser.display_name,
          photoUrl: typedUser.photo_url,
          emailVerified: typedUser.email_verified,
          provider: typedUser.provider,
        },
      });
    } catch (error: unknown) {
      console.error("Error in profile update:", error);
      res.status(500).json({
        error: "Internal server error",
        code: "INTERNAL_ERROR",
      } satisfies ApiError);
    }
  },
);

// POST /api/user/tokens - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è FCM —Ç–æ–∫–µ–Ω–∞
app.post(
  "/api/user/tokens",
  tokenRegistrationLimiter,
  authenticateUser,
  async (req: Request, res: Response): Promise<void> => {
    try {
      const authReq = req as AuthenticatedRequest;
      const userId = authReq.user!.userId;
      const { fcmToken, deviceId, deviceType }: RegisterTokenRequest = req.body;

      if (!fcmToken) {
        res.status(400).json({
          error: "Missing required field: fcmToken",
          code: "MISSING_FCM_TOKEN",
        } satisfies ApiError);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–∫–µ–Ω
      const { data: existingToken } = await supabase
        .from("user_tokens")
        .select("*")
        .eq("user_id", userId)
        .eq("fcm_token", fcmToken)
        .single();

      if (existingToken) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω (–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ—Å–ª–∏ –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)
        const { data: updatedToken, error } = await supabase
          .from("user_tokens")
          .update({
            is_active: true,
            device_id: deviceId || existingToken.device_id,
            device_type: deviceType || existingToken.device_type,
            updated_at: new Date().toISOString(),
          })
          .eq("id", existingToken.id)
          .select()
          .single();

        if (error) {
          console.error("Error updating FCM token:", error);
          res.status(500).json({
            error: "Failed to update FCM token",
            code: "TOKEN_UPDATE_FAILED",
          } satisfies ApiError);
          return;
        }

        const response: RegisterTokenResponse = {
          message: "FCM token updated successfully",
          token: {
            id: updatedToken.id,
            deviceId: updatedToken.device_id,
            deviceType: updatedToken.device_type,
            isActive: updatedToken.is_active,
          },
        };

        res.json(response);
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const { data: newToken, error } = await supabase
        .from("user_tokens")
        .insert({
          user_id: userId,
          fcm_token: fcmToken,
          device_id: deviceId,
          device_type: deviceType || "unknown",
        })
        .select()
        .single();

      if (error) {
        console.error("Error creating FCM token:", error);
        res.status(500).json({
          error: "Failed to register FCM token",
          code: "TOKEN_CREATE_FAILED",
        } satisfies ApiError);
        return;
      }

      const response: RegisterTokenResponse = {
        message: "FCM token registered successfully",
        token: {
          id: newToken.id,
          deviceId: newToken.device_id,
          deviceType: newToken.device_type,
          isActive: newToken.is_active,
        },
      };

      res.status(201).json(response);
    } catch (error: unknown) {
      console.error("Error in FCM token registration:", error);
      res.status(500).json({
        error: "Internal server error",
        code: "INTERNAL_ERROR",
      } satisfies ApiError);
    }
  },
);

// GET /api/user/echoes/:echoId - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —ç—Ö–æ –ø–æ ID
app.get(
  "/api/user/echoes/:echoId",
  // readLimiter, // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û
  authenticateUser,
  async (req: Request, res: Response): Promise<void> => {
    try {
      const authReq = req as AuthenticatedRequest;
      const userId = authReq.user!.userId;
      const echoId = req.params.echoId;

      const { data: echo, error: echoError } = await supabase
        .from("echoes")
        .select(
          `
          id,
          user_id,
          return_at,
          created_at,
          echo_parts (
            id,
            type,
            content,
            order_index
          )
        `,
        )
        .eq("id", echoId)
        .eq("user_id", userId)
        .single();

      if (echoError) {
        console.error("Error fetching echo:", echoError);
        res.status(404).json({ error: "Echo not found" });
        return;
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º echo_parts –≤ parts –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
      const formattedEcho = {
        id: echo.id,
        user_id: echo.user_id,
        return_at: echo.return_at,
        created_at: echo.created_at,
        parts: (echo.echo_parts || [])
          .sort((a: any, b: any) => a.order_index - b.order_index)
          .map((part: any) => ({
            id: part.id,
            type: part.type,
            content: part.content,
            order_index: part.order_index,
          })),
      };

      res.json(formattedEcho);
    } catch (error) {
      console.error("Error in /api/user/echoes/:echoId:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  },
);

// GET /api/user/echoes - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ echoes –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get(
  "/api/user/echoes",
  readLimiter,
  authenticateUser,
  async (req: Request, res: Response): Promise<void> => {
    try {
      const authReq = req as AuthenticatedRequest;
      const userId = authReq.user!.userId;
      const { limit = "20", offset = "0" }: GetEchoesQuery = req.query;

      const limitNum = parseInt(limit);
      const offsetNum = parseInt(offset);

      const { data: echoes, error } = await supabase
        .from("echoes")
        .select(
          `
        id,
        return_at,
        created_at,
        echo_parts (
          id,
          type,
          content,
          order_index
        )
      `,
        )
        .eq("user_id", userId)
        .order("created_at", { ascending: false })
        .range(offsetNum, offsetNum + limitNum - 1);

      if (error) {
        console.error("Error fetching user echoes:", error);
        res.status(500).json({
          error: "Failed to fetch echoes",
          code: "ECHOES_FETCH_FAILED",
        } satisfies ApiError);
        return;
      }

      const formattedEchoes = (echoes || []).map((echo) => ({
        id: echo.id,
        return_at: echo.return_at,
        created_at: echo.created_at,
        parts: (echo.echo_parts || [])
          .sort((a: any, b: any) => a.order_index - b.order_index)
          .map((part: any) => ({
            id: part.id,
            type: part.type,
            content: part.content,
            order_index: part.order_index,
          })),
      }));

      const response: GetEchoesResponse = {
        echoes: formattedEchoes,
        pagination: {
          limit: limitNum,
          offset: offsetNum,
          total: echoes?.length || 0,
        },
      };

      res.json(response);
    } catch (error: unknown) {
      console.error("Error in echoes fetch:", error);
      res.status(500).json({
        error: "Internal server error",
        code: "INTERNAL_ERROR",
      } satisfies ApiError);
    }
  },
);

// POST /api/upload - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Supabase Storage
app.post(
  "/api/upload",
  authenticateUser,
  upload.single("file"),
  async (req: AuthenticatedRequest, res: Response): Promise<void> => {
    try {
      if (!req.file) {
        res.status(400).json({
          error: "No file uploaded",
          code: "NO_FILE",
        } satisfies ApiError);
        return;
      }

      const userId = req.user!.userId;
      const { originalname, mimetype, buffer } = req.file;

      console.log(
        `üì§ Uploading file: ${originalname} (${mimetype}) for user: ${userId}`,
      );

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
      const result = await uploadFileToStorage(
        buffer,
        originalname,
        mimetype,
        userId,
      );

      res.json({
        success: true,
        data: {
          url: result.url,
          path: result.path,
          fileName: originalname,
        },
      });
    } catch (error: unknown) {
      console.error("File upload error:", error);
      res.status(500).json({
        error: error instanceof Error ? error.message : "Upload failed",
        code: "UPLOAD_FAILED",
      } satisfies ApiError);
    }
  },
);

// Health check endpoint
app.get(
  "/health",
  healthCheckLimiter,
  async (req: Request, res: Response): Promise<void> => {
    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
      const supabaseConnection = await testSupabaseConnection();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis/BullMQ
      let bullmqOk = false;
      try {
        const { echoQueue } = await import("./echoQueue");
        await echoQueue.getWaiting(); // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        bullmqOk = true;
      } catch (error: unknown) {
        console.warn(
          "BullMQ connection test failed:",
          error instanceof Error ? error.message : "Unknown error",
        );
      }

      const response: HealthCheckResponse = {
        status: "OK",
        timestamp: new Date().toISOString(),
        services: {
          firebase: "initialized",
          supabase: supabaseConnection.supabase
            ? `connected ${supabaseConnection.clientInfo?.url} ${supabaseConnection.clientInfo?.hasServiceRole}`
            : "connection_failed",
          redis: bullmqOk ? "connected" : "connection_failed",
          queue: bullmqOk ? "active" : "inactive",
        },
      };

      res.json(response);
    } catch (error: unknown) {
      console.error("Health check error:", error);
      const errorResponse: HealthCheckResponse = {
        status: "Service Unavailable",
        timestamp: new Date().toISOString(),
        error: error instanceof Error ? error.message : "Unknown error",
      };
      res.status(503).json(errorResponse);
    }
  },
);

// Start server
app.listen(PORT, () => {
  console.log(`üöÄ Server is running on port ${PORT}`);
  console.log(`üè• Health check: http://localhost:${PORT}/health`);
  console.log(`üìä Bull Board UI: http://localhost:${PORT}/admin/queues`);
  console.log(`üìã Queue monitoring available at the Bull Board URL`);
});

export default app;
