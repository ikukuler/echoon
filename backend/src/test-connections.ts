#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ Firebase –∏ Supabase
 * –ó–∞–ø—É—Å–∫: tsx src/test-connections.ts
 */

import "dotenv/config";

async function testConnections(): Promise<void> {
  console.log("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π EchoOn Backend\n");

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º Firebase
  console.log("üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Firebase Admin SDK...");
  try {
    const admin = await import("./firebase-admin-init");
    const app = admin.default;
    console.log(
      `‚úÖ Firebase: –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø—Ä–æ–µ–∫—Ç—É "${
        app.options.projectId || "unknown"
      }"`,
    );
  } catch (error: unknown) {
    console.log(
      `‚ùå Firebase: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - ${
        error instanceof Error ? error.message : "Unknown error"
      }`,
    );
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º Supabase
  console.log("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Supabase...");
  try {
    const { supabase, testConnection, getClientInfo } = await import(
      "./supabaseClient"
    );

    const clientInfo = getClientInfo();
    console.log(`üì° Supabase URL: ${clientInfo?.url || "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}`);

    const isConnected = await testConnection();
    if (isConnected) {
      console.log("‚úÖ Supabase: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      const { data: tables, error } = await supabase
        .from("information_schema.tables")
        .select("table_name")
        .eq("table_schema", "public")
        .in("table_name", ["echoes", "echo_parts", "users", "user_tokens"]);

      if (!error && tables) {
        const tableNames = tables.map((t: any) => t.table_name);
        console.log(`üìã –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: ${tableNames.join(", ")}`);

        const requiredTables = ["echoes", "echo_parts", "users", "user_tokens"];
        const missingTables = requiredTables.filter(
          (table) => !tableNames.includes(table),
        );

        if (missingTables.length === 0) {
          console.log("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç");
        } else {
          console.log(
            `‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: ${missingTables.join(
              ", ",
            )}. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∏–∑ database.sql`,
          );
        }
      }
    } else {
      console.log("‚ùå Supabase: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è");
    }
  } catch (error: unknown) {
    console.log(
      `‚ùå Supabase: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - ${
        error instanceof Error ? error.message : "Unknown error"
      }`,
    );
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º Redis/BullMQ
  console.log("\nüî¥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis/BullMQ...");
  try {
    const { echoQueue } = await import("./echoQueue");
    await echoQueue.getWaiting();
    console.log("‚úÖ Redis/BullMQ: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");
  } catch (error: unknown) {
    console.log(
      `‚ùå Redis/BullMQ: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - ${
        error instanceof Error ? error.message : "Unknown error"
      }`,
    );
  }

  console.log("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
  console.log("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run dev");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testConnections().catch(console.error);
