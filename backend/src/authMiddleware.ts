import { Request, Response, NextFunction } from "express";
import { authService } from "./authService";

export interface AuthenticatedRequest extends Request {
  user?: {
    userId: string;
    email: string;
  };
}

// Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const authenticateUser = async (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction,
): Promise<void> => {
  try {
    const authHeader = req.headers.authorization;
    console.log("üîê Auth middleware - URL:", req.url);
    console.log(
      "üîê Auth middleware - Authorization header:",
      authHeader ? "present" : "missing",
    );

    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      console.log("‚ùå Auth middleware - Invalid authorization header");
      res.status(401).json({
        error: "Missing or invalid Authorization header",
        code: "MISSING_AUTH_TOKEN",
      });
      return;
    }

    const token = authHeader.substring(7); // –£–±–∏—Ä–∞–µ–º 'Bearer '
    const decoded = authService.verifyToken(token);

    if (!decoded) {
      res.status(401).json({
        error: "Invalid or expired token",
        code: "INVALID_TOKEN",
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const user = await authService.getUserById(decoded.userId);
    if (!user) {
      res.status(401).json({
        error: "User not found",
        code: "USER_NOT_FOUND",
      });
      return;
    }

    req.user = decoded;
    next();
  } catch (error) {
    console.error("Authentication error:", error);
    res.status(500).json({
      error: "Authentication failed",
      code: "AUTH_ERROR",
    });
  }
};

// Middleware —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
export const verifyTokenOnly = (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction,
): void => {
  try {
    const authHeader = req.headers.authorization;

    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      res.status(401).json({
        error: "Missing or invalid Authorization header",
        code: "MISSING_AUTH_TOKEN",
      });
      return;
    }

    const token = authHeader.substring(7);
    const decoded = authService.verifyToken(token);

    if (!decoded) {
      res.status(401).json({
        error: "Invalid or expired token",
        code: "INVALID_TOKEN",
      });
      return;
    }

    req.user = decoded;
    next();
  } catch (error) {
    console.error("Token verification error:", error);
    res.status(500).json({
      error: "Token verification failed",
      code: "TOKEN_ERROR",
    });
  }
};
